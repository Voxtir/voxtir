generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum TranscriptionType {
    AUTOMATIC
    MANUAL
}

model Document {
    id                              String   @id @default(uuid())
    title                           String
    createdAt                       DateTime @default(now())
    updatedAt                       DateTime @updatedAt
    project                         Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId                       String // relation scalar field (used in the `@relation` attribute above)  
    // TipTap document data
    data                            Bytes?
    // Audio file
    audioFileURL                    String?
    rawAudioFileLengthSeconds       Float?
    processedAudioFileLengthSeconds Float?
    rawAudioFileExtension           String?
    // Transcription data
    language                        String?
    speakerCount                    Int?
    dialect                         String?

    // Other
    isTrashed     Boolean           @default(false)
    transcription TranscriptionJob?

    // Creator
    createdByUser   User?   @relation(fields: [createdByUserId], references: [id])
    createdByUserId String? // relation scalar field (used in the `@relation` attribute above)

    @@index([projectId])
}

model TranscriptionJob {
    id         String   @id @default(uuid())
    document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
    documentId String   @unique // relation scalar field (used in the `@relation` attribute above)

    jobName       String?                    @unique
    jobStartedAt  DateTime?
    jobFinishedAt DateTime?
    type          TranscriptionType
    status        TranscriptionProcessStatus

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum TranscriptionProcessStatus {
    PENDING_AUDIO_FILE_UPLOAD
    AUDIO_PREPROCESSOR_JOB_PENDING
    QUEUED
    TRANSCRIPTION_JOB_RUNNING
    TRANSCRIPTION_JOB_COMPLETED
    FAILED
    DONE
}

model User {
    id                            String              @id
    auth0ManagementApiUserDetails Json?
    credits                       Int                 @default(3)
    UsersOnProjects               UserOnProject[]
    PinnedProjects                PinnedProjects[]
    ProjectInvitation             ProjectInvitation[]
    Document                      Document[]
    createdAt                     DateTime            @default(now())
    updatedAt                     DateTime            @updatedAt
}

model Project {
    id                String              @id @default(uuid())
    name              String
    description       String?
    createdAt         DateTime            @default(now())
    updatedAt         DateTime            @updatedAt
    UsersOnProjects   UserOnProject[]
    Documents         Document[]
    ProjectInvitation ProjectInvitation[]
    PinnedProjects    PinnedProjects[]
}

model UserOnProject {
    id        String      @id @default(uuid())
    project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId String // relation scalar field (used in the `@relation` attribute above)
    user      User        @relation(fields: [userId], references: [id])
    userId    String // relation scalar field (used in the `@relation` attribute above)
    role      ProjectRole
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt

    @@index([projectId, userId])
}

enum ProjectRole {
    ADMIN
    MEMBER
}

model ProjectInvitation {
    id        String      @id @default(uuid())
    project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId String // relation scalar field (used in the `@relation` attribute above)
    email     String
    role      ProjectRole
    token     String      @unique
    used      Boolean     @default(false)
    usedBy    User?       @relation(fields: [usedById], references: [id])
    usedById  String? // relation scalar field (used in the `@relation` attribute above)
    expiresAt DateTime
    createdAt DateTime    @default(now())
    updatedAt DateTime    @default(now()) @updatedAt

    @@index([projectId, email, token])
}

model PinnedProjects {
    id        String   @id @default(uuid())
    project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId String // relation scalar field (used in the `@relation` attribute above)
    user      User     @relation(fields: [userId], references: [id])
    userId    String // relation scalar field (used in the `@relation` attribute above)
    pinned    Boolean  @default(true)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([projectId, userId])
    @@index([projectId, userId])
}

model Task {
    id            Int       @id @default(autoincrement())
    type          taskType
    details       String
    isLocked      Boolean
    lastSuccessAt DateTime?
    errorMessages String?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt

    @@unique([type])
}

enum taskType {
    TRANSCRIPTION_JOB_STARTER
    AUDIO_PREPROCESSOR_JOB_STARTER
}
