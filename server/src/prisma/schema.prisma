generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum TranscriptionType {
    AUTOMATIC
    MANUAL
}

model Document {
    id                         String                      @id @default(uuid())
    title                      String
    createdAt                  DateTime                    @default(now())
    updatedAt                  DateTime                    @updatedAt
    project                    Project                     @relation(fields: [projectId], references: [id])
    projectId                  String // relation scalar field (used in the `@relation` attribute above)  
    // TipTap document data
    data                       Bytes                       @default("")
    // Audio file
    audioFileURL               String?
    audioFileExtension         String? //mpeg, wav, etc
    // Transcription data
    language                   String?
    speakerCount               Int?
    dialect                    String?
    transcriptionType          TranscriptionType
    // Automatic transcription data
    transcriptionStatus        TranscriptionProcessStatus?
    doSpeakerDiarization       Boolean?
    mergedTranscriptionFileURL String?
    speakerDiarizationFileURL  String?
    speechToTextFileURL        String?

    // Other
    isTrashed Boolean @default(false)

    @@index([projectId])
}

enum TranscriptionProcessStatus {
    CREATED
    QUEUED
    PROCESSING
    FAILED
    DONE
}

model User {
    id                            String          @id
    auth0ManagementApiUserDetails Json?
    UsersOnProjects               UserOnProject[]
}

model Project {
    id                String              @id @default(uuid())
    name              String
    description       String?
    createdAt         DateTime            @default(now())
    updatedAt         DateTime            @updatedAt
    UsersOnProjects   UserOnProject[]
    Documents         Document[]
    ProjectInvitation ProjectInvitation[]
}

model UserOnProject {
    id        String      @id @default(uuid())
    project   Project     @relation(fields: [projectId], references: [id])
    projectId String // relation scalar field (used in the `@relation` attribute above)
    user      User        @relation(fields: [userId], references: [id])
    userId    String // relation scalar field (used in the `@relation` attribute above)
    role      ProjectRole
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt

    @@index([projectId, userId])
}

enum ProjectRole {
    ADMIN
    MEMBER
}

model ProjectInvitation {
    id        String      @id @default(uuid())
    project   Project     @relation(fields: [projectId], references: [id])
    projectId String // relation scalar field (used in the `@relation` attribute above)
    email     String
    role      ProjectRole
    token     String      @unique
    used      Boolean     @default(false)
    expiresAt DateTime
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt

    @@index([projectId, email, token])
}
