generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Document {
    id                   String                 @id @default(uuid())
    data                 Bytes
    createdAt            DateTime               @default(now())
    updatedAt            DateTime               @updatedAt
    audioFileUrl         String
    TranscriptionProcess TranscriptionProcess[]
    project              Project                @relation(fields: [projectId], references: [id])
    projectId            String // relation scalar field (used in the `@relation` attribute above)    

    @@index([projectId])
}

// Trigger included with historic table
model TranscriptionProcess {
    id                          String                     @id @default(uuid())
    status                      TranscriptionProcessStatus
    doSpeakerDiarization        Boolean
    document                    Document                   @relation(fields: [documentId], references: [id])
    documentId                  String // relation scalar field (used in the `@relation` attribute above)
    // S3 file locations
    rawAudioFileURL             String
    transcriptionAudioFileURL   String
    speakerDiarizationFileURL   String
    whisperTranscriptionFileURL String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum TranscriptionProcessStatus {
    CREATED
    QUEUED
    PROCESSING
    FAILED
    DONE
}

model User {
    id                            String          @id
    auth0ManagementApiUserDetails Json?
    UsersOnProjects               UserOnProject[]
}

model Project {
    id              String          @id @default(uuid())
    name            String
    description     String?
    createdAt       DateTime        @default(now())
    updatedAt       DateTime        @updatedAt
    UsersOnProjects UserOnProject[]
    Documents       Document[]
}

model UserOnProject {
    id        String      @id @default(uuid())
    project   Project     @relation(fields: [projectId], references: [id])
    projectId String // relation scalar field (used in the `@relation` attribute above)
    user      User        @relation(fields: [userId], references: [id])
    userId    String // relation scalar field (used in the `@relation` attribute above)
    role      ProjectRole
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt

    @@index([projectId, userId])
}

enum ProjectRole {
    ADMIN
    USER
}
